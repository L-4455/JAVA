1.怎么通过反射实例化对象?
    1.1 先试用Class.forName("完整的类名")方法获取到class文件.
        拿到返回值.newInstance();即可实例化对象.
        .newInstance()是通过类的无参数构造方法实例化对象的.
    1.2 也可以使用有参数构造方法实例化对象
        1.2.1 获取class文件.
        1.2.2 获取class文件指定的构造方法拿到返回值.
        1.2.3 通过返回值.newInstance("实际参数");来实例化对象.
2.具体代码实现实例化对象
	2.1
	Class vipServiceClass = Class.forName("pers.reflection.bean.Vip");
	object obj = userServiceClass.newInstance();
	2.2
	Class VipServiceClass = Class.forName("pers.reflection.bean.Vip");
	Constructor constructor =  VipServiceClass.getDeclaredConstructor(int no, String name);
	constructor.newInstance(101,"lisi");

3.怎么通过反射机制获取属性?
	3.1 获取Class文件,在通过class文件调用相对应的方法.具体代码实现:
	3.2
	Class vipClass = Class.forName("pers.reflection.bean.Vip");
	object obj = vipClass.newInstance();
	获取所有公开的属性名:
	Field[] fields = vipClass.getFields();
	for (Field field : fields)(
		String fieldName = field.getName();
		System.out.println(fieldName);
	)









.怎么通过反射机制访问属性?






.怎么通过反射机制获取属性的:修饰符列表,返回值,属性名 属性值?
	.先获取Class文件,使用反射机制实例化对象.
	Class vip = Class.forName("pers.reflection.bean.Vip");
	object obj = vip.newInstance();
	.在获取所有属性的名
		Filed[] fields = vip.getDeclardFields();
		for(Field field : fields){
			获取属性的修饰符列表:
			String parameterName = Modifier.toString(field.Modifiers()).

			获取属性的类型:
			简短类型名
			System.out.println(field.getType().typeName.getSimpleName());
			完整类型名
			System.out.println(field.getType().typeName.getName());

			获取属性名:
			System.out.println(field.getName());

			获取属性值:
			vip.getDeclaredField(field.getName()).get(obj);

		}



