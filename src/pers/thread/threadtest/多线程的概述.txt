1.什么是线程什么是进程?
    1.进程是一个应用程序(一个进程一个应用程序)
    2.线程是程序中的执行场景/执行单元.
        一个进程可以启动多个线程.
2.对于JAVA执行程序来说,在DOS中输入
    java hello 敲回车后
    JAVA会启动JVM进程,
    JVM进程会启动一个主线程来处理main方法,
    在启动一个垃圾回收线程GC来处理垃圾回收.
    在目前程序中JVM启动了两个线程并发:
    一个线程负责main方法,另一个线程负责垃圾回收.
3.进程就相当于一个公司
    公司里的员工就相当于是线程
    比如:
    阿里巴巴公司(一个进程)
        马云(一个线程)
        童文红(一个线程)
    京东(一个进程)
        刘强东(一个线程)
        刘强茹(一个线程)
    其中进程之间不共享任何资源.
    线程之间有可能会共享一些资源.
4.在java中一个线程就是一个栈
    堆与方法区共享
    栈与栈之间是独立的,不共享任何资源.

    比如java程序启动了10个线程,那么就有10个栈,这些栈之间不会共享任何资源
    主线程做主线程的事,其他线程做各自的事,之间谁也不理谁.这就是多线程并发

5.主线程(栈)main方法结束了,java程序有可能不会结束,因为启动了其他线程,其他线程(栈)没有结束即使主线程结束了
    java程序也不会结束.这颠覆了之前的理念:main方法结束,整个java程序结束.有了多线程以后就不会了.
6.对于单核CPU来说并不能做到真正的多线程并发操作
	单核CPU相当于只有一个大脑,一个大脑在同一个时间段只能处理一件事.
	但是单核CPU给人一种多线程并发的感觉,因为CPU计算机极快,在一瞬间就完成了.
	单核CPU在两个进程之间频繁切换,导致给人一种并发的感觉.

  对于多核CPU肯定是能完成真正的多线程并发操作,4核CPU就能执行4个线程.
  4核就相当于4个大脑,同一时间段可以做4个不同的事.
7.JAVA中启动多线程有两种方式
	1.一种是类直接继承Thread,重写run方法
		 public class My extends Thread{
		 	public void run(){

		 	}
		 }
		 创建线程对象
		 My my = new My();
		 启动线程
		 my.start();

    2.类实现Runnable接口,实现里面的Run方法.
        public class my implements Runnable{
            public void run(){

            }
        }
        my s = new my();
        s.start();
    3.采用匿名内部类
        public class ThreadTest{
            public static void main(String [] args){
                Thread thread = new Thread(new Runnable(){
                    public void run(){
                        System.out.println("niHao")
                    }
                });
                thread.start();
            }
        }
8.以上三种方式,第二种使用较多,因为实现接口,不会影响后续这个类继承其他类.
9.java中有三大变量:
	在堆中:实例变量
	在方法区中:静态变量
	在栈中:局部变量
   
   实例变量和静态变量会有线程安全问题,局部变量不会.因为每个栈都是独立的.

10.synchronized的三种写法
	出现在实例方法上.
	出现在代码块上.
	出现在静态代码块上.

11.在开发中怎么有效的解决线程安全问题.






12.守护线程概述
	什么是守护线程?
	1.垃圾回收器可以看作为是一个守护线程
	2.线程分为:
		用户线程
		守护线程
	3.守护线程一般是一个死循环,
		用户线程不结束,守护线程也不会结束.

		守护线程结合定时器可以做到在每晚0点自动备份数据
		如果用户线程结束了那么就不用备份数据.
13.定时器的概述
	什么是定时器?
		在特定的时间,间隔特定的时间执行特定的代码.
		定时器只要开始执行任务,就不会停止,除非手动或物理停止.
