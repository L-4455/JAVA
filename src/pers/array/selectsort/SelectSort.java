package pers.array.selectsort;

/**
 * @Author LiZiHao
 * @Date 2022/6/4/9:22
 */
public class SelectSort {
    /*
        选择排序
        选择排序是找出排序的那一堆数据中最小值和最左边的值交换位置
        相对于冒泡排序选择排序的交换位置次数是较少的.
        选择排序每次交换位置都是有意义的有价值的
        int[] array = 8,65,17,268,148,88

        第1次循环:
        原始数据:8,65,17,268,148,88
        最小值为8,8在最左边,不需要交换位置
        8,65,17,268,148,88(这一堆数据中最小值的下标为0)

        第2次循环:
        原始数据:65,17,268,148,88
        最小值为17,17跟65交换位置
        17,65,268,148,88(这一堆数据中最小值的下标为1)

        第3次循环:
        原始数据:65,268,148,88
        最小值为65,在最左边,不需要交换位置
        65,268,148,88(这一堆数据中最小值的下标为2)

        第4次循环:
        原始数据:268,148,88
        最小值为88,88跟268交换位置
        88,148,268(这一堆数据中最小值的下标为3)

        第5次循环:
        原始数据:148,268
        最小值为148,在最左边,不需要交换位置
        148,268(这一堆数据中最小值的下标为4)

        注意:循环次数为5次


        假设
            第一个元素是最小值,那么我们就拿第一个元素和后面的元素做比较,如果后面的元素比第一个元素还要小,
            那么我们就这两个元素交换位置再继续比较下去

            8,65,17,268,148,88
        假设8是最小值,发现8确实是最小值那么就不在去比较后面的元素;
            65,17,268,148,88
        假设65是最小值,65和17做比较发现17更小,那么就让17和65换位置.
            17,65,268,148,88
        17在跟268,148,88做比较,发现仍是17最小.那么此时最小值就是17
            65,268,148,88
         假设65是最小值,发现65确实是最小值,那么就去和后面的元素作比较,此时最小值是65
            148,268,88
         假设268是最小值,268和148作比较发现148更小,那么148此时是最小值,
            88,268,148
         148和88做比较发现88更小,那么此时88是最小值

         268,148
         假设268是最小值,268和148作比较,发现148更小那么此时148就是最小值.




     */
    public static void main(String[] args) {
        int[] array = {8, 65, 17, 268, 148, 88};
        for (int i = 0; i < array.length - 1; i++) {
//            System.out.println(i);
//            i的值为:0 1 2 3 4
//            外层控制循环次数.
//            i的值刚好也是这一堆数据中最小元素的下标;
            for (int j = i + 1; j < array.length; j++) {
//             System.out.println("====>" +j);
                int min = i;
                if (array[j] < array[min]) {
                    min = j;
                }
                if (min != i) {
//                 表示存在最小数据
//                 array[min]最小值
//                 array[i]最左边的数据;
                    int temp;
                    temp = array[min];
                    array[min] = array[i];
                    array[i] = temp;
                }
            }
        }
        for (int i = 0; i < array.length; i++) {
            System.out.println(array[i]);
        }
    }
}
