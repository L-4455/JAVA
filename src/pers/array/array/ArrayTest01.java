package pers.array.array;

/**
 * @Author LiZiHao
 * @Date 2022/5/15/23:35
 */
public class ArrayTest01 {
    /*
        1:Java语言中的数组是一种引用数据类型结构,不是基本数据类型.
        2:数组相当于一个容器,可以容纳多个数据(元素),数组是一个数据的集合;
        数组:字面意思:一组数据;
        3:数据中存储的元素可以是"基本数据类型"也可以是"引用数据类型";
        4:数组中的元素是有下标的,对数组中的元素进行"存/取"时都要用到下标,下标是从0开始,以1递增的;
        5:因为数组是引用数据类型,所以数组对象是存储在堆内存中的(数组是存储在堆内存中的);
        6:数组当中存储的是Java对象的话,那么实际上存储的是Java对象的"引用(内存地址)",数组不能直接存储Java对象.
        7:数组中都一个length属性(JAVA自带),用来获取数组中元素的个数;
        8:数组的种类:一维数组,二维数组,三维数组,多维数组.....(一维数组经常使用,二维数组偶尔使用)
        9:数组一旦创建,在JAVA中规定:数组长度不可变.(数组长度不可变);
        10:数组中的元素只能是同类型的,int类型的数组就只能存储int类型的数据,String类型的数组就只能存储String类型的数据.
            例如:苹果购物袋里只能放苹果不能放橘子.
        11:数组中的元素保存在一个小方框里,一个小方框只能保存一个元素,小方框有内存地址.小方框的内存地址是连续的.一般以第一个小方框的内存地址作为整个数组对象的内存地址.
        12:数组这种数据结构的优点和缺点:
            优点:查找/查询/检索某个下表上的数据效率极高.高到没朋友;
            为什么检索效率高?:
                1:数组检索元素是通过下标和内存地址使用数学公式计算出来的.
                2:数组的元素的存存地址在空间上存储是连续的
                3:数组中的元素是同一种类型,占用空间大小一样.
                4:知道第一个元素的内存地址,知道每一个元素占用空间大小一致,又知道每一个元素的下标.
                所以通过数学表达式就可以计算出某个下标保存元素的内存地址,
                直接通过内存地址定位元素.所以数组检索是效率最高的
            缺点:
                1:数组中的元素的随机"曾/删"麻烦,因为曾一个元素,就意味着随机"曾元素"后的元素统一向前后者向后移位移的操作.
                2:数组中不能存储太大的数据
                    因为在一块内存空间中很难找到连续的数据大的内存地址
                3:虽然数组的随机"曾/删"会影响后面的元素,但不会影响最后一个元素.最后一个元素的"曾/删"都不会影响到前面的元素

           13:一维数组的声明和初始化
                声明:
                    byte[] array1;
                    short[] array2
                    int[] array3;
                    long[] array4;
                    float[] array5;
                    double[] array6;
                    boolean[] array7;
                    char[] array8;
                初始化:
                    静态初始化:
                    int[] array1 = {12,123,34,123,123};
                    动态初始化:
                    int[] array2 = new int[5]; 表示定义一个长度为5的int类型数组,初始化元素每个值为0;
                    String[] array3 = new String[2] 表示定义一个长度为2的String类型数组,每个元素的初始值为null;

     */
    public static void main(String[] args) {
//        静态声明一个int类型的一维数组
        int[] array = {123, 434, 546, 67, 1123};
//        动态声明一个double类型的一维数组
        double[] a = new double[100];

//        访问int类型数组的长度
        System.out.println("该数组的长度为:" + array.length);
//        通过下标存/取某个元素
//        取(读)
        System.out.println("该数组第一个元素为:" + array[0]);
        System.out.println("该数组最后一个元素为:" + (array.length - 1));
//        存(改)
        array[0] = 178;//修改第一个元素
        array[array.length - 1] = 99;//修改最后一个元素
        System.out.println("------------------------------------");

    }
}
